# health chcek in docker https://stackoverflow.com/questions/41152408/dynamic-dns-resolution-with-haproxy-and-docker

global
    # log /dev   local0
    # log /dev   local1 notice
    # maxconn 4096
    # user haproxy
    # group haproxy
    daemon
    log 127.0.0.1 local0 debug
    tune.ssl.default-dh-param 2048

defaults
    option  log-health-checks
    option  forwardfor
    option  http-server-close

    stats   enable
    stats   auth "$HAPROXY_STATS_USER":"$HAPROXY_STATS_PASSWORD"
    stats   uri /haproxyStats

    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    retries                 3
    option  redispatch
    timeout http-request    300s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    timeout tunnel          3600s
    maxconn                 1000

    default-server init-addr none

resolvers docker_resolver
    nameserver dns 127.0.0.11:53

frontend http-in
    bind *:80
    bind *:443 ssl crt /run/secrets/ssl/fullchain.pem

    timeout client  1m

    # Define hosts
    acl host_landing hdr(host) -i breadboard.io
    acl host_landing hdr(host) -i www.breadboard.io
    acl host_account hdr(host) -i account.breadboard.io
    acl host_gateway hdr(host) -i github.run
    acl host_gateway hdr(host) -i gitlab.run
    acl host_gateway hdr(host) -i bitbucket.run
    acl host_gateway hdr(host) -i foobar.run
    acl host_tailf   hdr(host) -i tailf.io
    acl host_tailf   hdr(host) -i www.tailf.io

    acl letsencrypt-acl path_beg /.well-known/acme-challenge/

    acl https          ssl_fc
    acl secured_cookie res.hdr(Set-Cookie),lower -m sub secure
    rspirep ^(set-cookie:.*) \1;\ Secure if https !secured_cookie

    use_backend letsencrypt-backend if letsencrypt-acl

    ## figure out which one to use
    use_backend bk_landing if host_landing
    use_backend bk_account if host_account
    use_backend bk_gateway if host_gateway
    use_backend bk_tailf   if host_tailf

backend bk_landing
    balance leastconn

    redirect scheme https code 301 if !{ ssl_fc }

    option httpchk GET /

    server landing landing.breadboard.xyz:1337 check resolvers docker_resolver resolve-prefer ipv4

backend bk_account
    balance leastconn

    redirect scheme https code 301 if !{ ssl_fc }

    option httpchk GET /health
    server account account.breadboard.xyz:8050 check resolvers docker_resolver resolve-prefer ipv4

backend bk_gateway
    balance leastconn

    redirect scheme https code 301 if !{ ssl_fc }

    option httpchk GET /
    server gateway gateway.breadboard.xyz:8070 check resolvers docker_resolver resolve-prefer ipv4

backend bk_tailf
    balance leastconn

    redirect scheme https code 301 if !{ ssl_fc }

    option httpchk GET /
    server tailf tailf.breadboard.xyz:8654 check resolvers docker_resolver resolve-prefer ipv4

backend letsencrypt-backend
    # option httpchk GET /.well-known/acme-challenge/abc
    # server letsencrypt letsencrypt.breadboard.xyz:8888 check fall 999999 resolvers docker_resolver resolve-prefer ipv4
    server letsencrypt letsencrypt.breadboard.xyz resolvers docker_resolver resolve-prefer ipv4

# https://www.haproxy.com/blog/ssl-client-certificate-management-at-application-level/
defaults REDIS
    mode tcp
    timeout connect         4s
    timeout server          30s
    timeout client          30s
    timeout tunnel          1h

    option tcp-check

    tcp-check connect
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    tcp-check send info\ replication\r\n
    tcp-check expect string role:master
    tcp-check send QUIT\r\n
    tcp-check expect string +OK

frontend ft_redis_account
    bind *:6500 ssl crt /run/secrets/ssl_admin/server.pem ca-file /run/secrets/ssl_admin/ca.crt verify required
    default_backend bk_redis_account

frontend ft_redis_metering
    bind *:6501 ssl crt /run/secrets/ssl_admin/server.pem ca-file /run/secrets/ssl_admin/ca.crt verify required
    default_backend bk_redis_metering

frontend ft_redis_codedb
    bind *:6503 ssl crt /run/secrets/ssl_admin/server.pem ca-file /run/secrets/ssl_admin/ca.crt verify required
    default_backend bk_redis_codedb

frontend ft_redis_tailf
    bind *:6504 ssl crt /run/secrets/ssl_admin/server.pem ca-file /run/secrets/ssl_admin/ca.crt verify required
    default_backend bk_redis_tailf

backend bk_redis_account
    server redis account.redis.breadboard.xyz:6379 check inter 1s

backend bk_redis_metering
    server redis metering.redis.breadboard.xyz:6379 check inter 1s

backend bk_redis_codedb
    server redis codedb.redis.breadboard.xyz:6379 check inter 1s

backend bk_redis_tailf
    server redis tailf.redis.breadboard.xyz:6379 check inter 1s